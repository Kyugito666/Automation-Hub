name: Bot Runner 24/7 (Self-Healing)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # Self-healing setiap 6 jam

jobs:
  run-all-bots:
    runs-on: ubuntu-latest
    timeout-minutes: 350 # Berhenti sebelum batas 6 jam (360m)

    steps:
      - name: 1. Checkout Framework (Automation-Hub)
        uses: actions/checkout@v4

      - name: 2. Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 2b. Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 3. Install jq (JSON Parser)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: 4. Clone/Pull Semua Bot & Tools (via Bash+jq)
        run: |
          echo "=== Memproses bots_config.json ==="
          jq -c '.bots_and_tools[]' config/bots_config.json | while IFS= read -r bot_config; do
            path=$(echo "$bot_config" | jq -r '.path')
            url=$(echo "$bot_config" | jq -r '.repo_url')
            name=$(echo "$bot_config" | jq -r '.name')
            enabled=$(echo "$bot_config" | jq -r '.enabled')
            
            # Skip disabled bots
            if [ "$enabled" != "true" ]; then
              echo "--- [$name] DISABLED, skipping ---"
              continue
            fi
            
            echo "--- [$name] ---"
            if [ -d "$path/.git" ]; then
              echo "Updating existing repo..."
              (cd "$path" && git pull --rebase || echo "WARN: Pull failed for $name") || true
            else
              echo "Cloning new repo..."
              mkdir -p "$(dirname "$path")"
              git clone --depth 1 "$url" "$path" || echo "ERROR: Clone failed for $name"
            fi
          done
          echo "✓ Semua tools dan bot berhasil di-sync."

      - name: 5. Deploy Proxies (via ProxySync Auto Mode)
        run: |
          if [ ! -d "proxysync" ]; then
            echo "ERROR: ProxySync tidak ditemukan!"
            exit 1
          fi
          
          echo "Copying proxy configs..."
          cp config/apilist.txt proxysync/apilist.txt
          cp config/paths.txt proxysync/paths.txt
          
          echo "Installing ProxySync deps..."
          cd proxysync
          pip install --no-cache-dir -r requirements.txt
          
          # CRITICAL: Gunakan auto mode jika tersedia
          if [ -f "auto_deploy.py" ]; then
            echo "Running ProxySync in AUTO mode..."
            python auto_deploy.py
          else
            echo "ERROR: auto_deploy.py tidak ditemukan!"
            echo "ProxySync tidak bisa jalan di CI/CD tanpa auto mode."
            exit 1
          fi
          cd ..

      - name: 6. Jalankan Semua Bot (Headless Mode Only)
        run: |
          run_bot_category() {
            local category=$1
            local base_dir="$PWD/bots/$category"
            
            if [ ! -d "$base_dir" ]; then
              echo "WARN: Folder $category tidak ditemukan, skip..."
              return
            fi
            
            echo "=== Starting $category bots ==="
            for bot_dir in "$base_dir"/*; do
              if [ -d "$bot_dir" ]; then
                bot_name=$(basename "$bot_dir")
                echo "--- Launching: $bot_name ---"
                
                (
                  cd "$bot_dir"
                  
                  # Install dependencies
                  if [ -f "requirements.txt" ]; then
                    pip install --no-cache-dir -q -r requirements.txt
                  fi
                  
                  if [ -f "package.json" ]; then
                    npm install --silent
                  fi
                  
                  # CRITICAL: Cari run file dengan headless/auto flag
                  if [ -f "run.py" ]; then
                    # Cek apakah support --headless atau --auto
                    if grep -q "headless\|auto\|no-interactive" run.py; then
                      echo "[$bot_name] Running in headless mode..."
                      timeout 340m python run.py --headless 2>&1 | sed "s/^/[$bot_name] /" &
                    else
                      echo "[$bot_name] WARNING: No headless mode detected, may hang!"
                      # Jalankan dengan timeout ketat
                      timeout 10m python run.py 2>&1 | sed "s/^/[$bot_name] /" || echo "[$bot_name] TIMEOUT/ERROR"
                    fi
                  elif [ -f "index.js" ]; then
                    if grep -q "headless\|auto\|no-interactive" index.js; then
                      echo "[$bot_name] Running in headless mode..."
                      timeout 340m node index.js --headless 2>&1 | sed "s/^/[$bot_name] /" &
                    else
                      echo "[$bot_name] WARNING: No headless mode detected, may hang!"
                      timeout 10m node index.js 2>&1 | sed "s/^/[$bot_name] /" || echo "[$bot_name] TIMEOUT/ERROR"
                    fi
                  elif [ -f "main.py" ]; then
                    if grep -q "headless\|auto" main.py; then
                      timeout 340m python main.py --headless 2>&1 | sed "s/^/[$bot_name] /" &
                    else
                      timeout 10m python main.py 2>&1 | sed "s/^/[$bot_name] /" || echo "[$bot_name] TIMEOUT/ERROR"
                    fi
                  else
                    echo "[$bot_name] ERROR: No run file found!"
                  fi
                ) &
                
                sleep 3 # Delay untuk menghindari race condition
              fi
            done
          }
          
          # Run kedua kategori bot
          run_bot_category "privatekey"
          run_bot_category "token"
          
          echo "=== Waiting for all bot processes ==="
          wait
          echo "✓ All bots completed."

      - name: 7. Upload Logs (On Failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: bot-logs
          path: |
            bots/**/logs/
            bots/**/*.log
          retention-days: 7
