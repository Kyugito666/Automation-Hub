name: Run Single Bot

on:
  workflow_dispatch:
    inputs:
      bot_name:
        description: 'Nama bot dari config'
        required: true
        type: string
      bot_path:
        description: 'Path bot (relatif dari root)'
        required: true
        type: string
      bot_repo:
        description: 'Repository URL'
        required: true
        type: string
      bot_type:
        description: 'Type: python or javascript'
        required: true
        type: string
      duration_minutes:
        description: 'Durasi run (menit, max 350)'
        required: false
        default: '340'
        type: string
      bot_inputs:
        description: 'JSON string input untuk bot (format: {"input_1":"y","input_2":"2"})'
        required: false
        default: '{}'
        type: string

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.duration_minutes) }}

    steps:
      - name: Setup Python
        if: github.event.inputs.bot_type == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Node.js
        if: github.event.inputs.bot_type == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clone Bot Repository
        run: |
          echo "Cloning ${{ github.event.inputs.bot_name }}..."
          git clone --depth 1 "${{ github.event.inputs.bot_repo }}" bot
          cd bot
          ls -la

      - name: Parse & Create Input File
        working-directory: bot
        run: |
          echo "Creating auto-answer input file..."
          
          # Parse JSON input dari Orchestrator
          INPUT_JSON='${{ github.event.inputs.bot_inputs }}'
          
          # Convert JSON ke newline-separated text file
          echo "$INPUT_JSON" | jq -r 'to_entries | sort_by(.key) | .[].value' > bot_answers.txt
          
          echo "=== Auto-Answer File Created ==="
          cat bot_answers.txt
          echo "================================"
          
          LINE_COUNT=$(wc -l < bot_answers.txt)
          if [ "$LINE_COUNT" -eq 0 ]; then
            echo "WARNING: No answers provided. Bot may hang if interactive."
          else
            echo "Loaded $LINE_COUNT answers for auto-injection"
          fi
      
      - name: Install Python Dependencies
        if: github.event.inputs.bot_type == 'python'
        working-directory: bot
        run: |
          if [ -f "requirements.txt" ]; then
            pip install --no-cache-dir -r requirements.txt
          fi

      - name: Install Node Dependencies
        if: github.event.inputs.bot_type == 'javascript'
        working-directory: bot
        run: |
          if [ -f "package.json" ]; then
            npm install --silent
          fi

      - name: Run Bot (Python) with Auto-Answer
        if: github.event.inputs.bot_type == 'python'
        working-directory: bot
        run: |
          RUN_FILE=""
          if [ -f "run.py" ]; then
            RUN_FILE="run.py"
          elif [ -f "main.py" ]; then
            RUN_FILE="main.py"
          else
            echo "ERROR: No run.py or main.py found"
            exit 1
          fi
          
          # Jika ada answer file, inject via stdin
          if [ -s "bot_answers.txt" ]; then
            echo "Running with auto-answers..."
            timeout ${{ github.event.inputs.duration_minutes }}m python "$RUN_FILE" < bot_answers.txt || echo "Bot finished/timeout"
          else
            echo "Running without answers (may hang)..."
            timeout ${{ github.event.inputs.duration_minutes }}m python "$RUN_FILE" || echo "Bot finished/timeout"
          fi

      - name: Run Bot (JavaScript) with Auto-Answer
        if: github.event.inputs.bot_type == 'javascript'
        working-directory: bot
        run: |
          RUN_FILE=""
          if [ -f "index.js" ]; then
            RUN_FILE="index.js"
          elif [ -f "main.js" ]; then
            RUN_FILE="main.js"
          else
            echo "ERROR: No index.js or main.js found"
            exit 1
          fi
          
          # Jika ada answer file, inject via stdin
          if [ -s "bot_answers.txt" ]; then
            echo "Running with auto-answers..."
            timeout ${{ github.event.inputs.duration_minutes }}m node "$RUN_FILE" < bot_answers.txt || echo "Bot finished/timeout"
          else
            echo "Running without answers (may hang)..."
            timeout ${{ github.event.inputs.duration_minutes }}m node "$RUN_FILE" || echo "Bot finished/timeout"
          fi

      - name: Upload Logs (On Failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.bot_name }}-logs
          path: bot/**/*.log
          retention-days: 3
